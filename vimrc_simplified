scriptencoding utf8
set encoding=utf8 fileencoding=utf8 termencoding=utf8 nobomb

set showmatch
runtime macros/matchit.vim

set ttyfast

set confirm

set shortmess=atTI

set splitright splitbelow

set diffopt+=vertical

set number numberwidth=3

set incsearch hls ignorecase smartcase

set formatoptions=tcwqn2
set cursorline

set nrformats-=octal

set showcmd

set switchbuf=useopen,usetab,newtab
set tabpagemax=50

set list listchars=tab:▸\ ,trail:·

set virtualedit=block

set complete=.,w,b,u,i
set completeopt=menu,menuone,preview,longest
set tags=tags,tags.gems

set wildmenu
set wildmode=list:longest,list:full
set wildignore+=*.zip,*.gz,*.bz,*.tar
set wildignore+=*.jpg,*.png,*.gif,*.avi,*.wmv,*.ogg,*.mp3,*.mov

set nowrap wrapscan showbreak=..

set autoread autowrite

set viminfo^=!

set sessionoptions=buffers,tabpages,help

set noesckeys ttimeout ttimeoutlen=1 timeoutlen=250

set autoindent copyindent cindent smartindent
set tabstop=2 shiftwidth=2 softtabstop=2
set expandtab smarttab shiftround

set backspace=indent,eol,start

set mousehide mouse= ttymouse=xterm2

set scrolloff=3
set lazyredraw ttyscroll=3

set foldmethod=manual nofoldenable

set t_ti= t_te=

set nobackup nowritebackup noswapfile

let mapleader=','

if maparg('<C-L>', 'n') ==# ''
  nnoremap <silent> <C-L> :nohlsearch<CR><C-L>
endif

set statusline=
set statusline+=[%n]
set statusline+=%t%m
set statusline+=%=
set statusline+=%r%y
set statusline+=[%{&ff}]
set statusline+=[%{&fenc!=''?&fenc:&enc}]
set statusline+=[%c,%l/%L]
set laststatus=2

"###############################################################################

nnoremap <silent> <leader>bd :bw<CR>
nnoremap <silent> <leader>da :silent bufdo bw<CR>

nnoremap <silent> g# #
nnoremap <silent> g* *

nnoremap <silent>g] :execute 'tselect ' . expand('<cword>')<CR>
nnoremap <silent><C-]> :execute 'tjump ' . expand('<cword>')<CR>
nnoremap <silent><C-w>g] :execute 'stselect ' . expand('<cword>')<CR>
nnoremap <silent><C-w><C-]> :execute 'stjump ' . expand('<cword>')<CR>

vnoremap <silent> * :<C-u>call HighlightVisual()<CR>//<CR>
vnoremap <silent> # :<C-u>call HighlightVisual()<CR>??<CR>
vnoremap <silent> ! :<c-u>call HighlightVisual()<CR>
nnoremap <silent> ! :call Highlight(expand('<cword>'))<CR>

nnoremap K <nop>
nnoremap Q <nop>

nnoremap <silent> <leader>ff :call Preserve('normal gg=G')<CR>

nnoremap Y y$

onoremap w :execute 'normal! '.v:count1.'w'<CR>

"###############################################################################

let g:loaded_vimballPlugin=1
let g:loaded_zipPlugin=1
let loaded_gzip=1
let g:loaded_tarPlugin=1
let g:loaded_netrwPlugin=1
let g:loaded_getscriptPlugin=1
let loaded_rrhelper=1

"###############################################################################

function! Trim()
  let l:hls = &hls
  setlocal nohls
  call Preserve('%s/\v\s+$//e')
  call Preserve('%s/\v($\n\s*)+%$//e')
  let &hls = l:hls
endfunction
command! Trim call Trim()

function! Preserve(command)
  setlocal lazyredraw
  let l:search=@/

  let last_view = winsaveview()
  silent execute a:command
  call winrestview(last_view)

  let @/=l:search
  redraw
  setlocal nolazyredraw
endfunction

function! GetVisual()
  try
    let temp = @s
    norm! gv"sy
    return substitute(escape(@s, '\*'), '\n', '\\n', 'g')
  finally
    let @s = temp
  endtry
endfunction

function! Highlight(text)
  let @/=a:text
  call feedkeys(":let v:hlsearch=1\<CR>", "n")
endfunction

function! HighlightVisual()
  call Highlight(GetVisual())
endfunction

function! EscapeAll(text)
  return substitute(escape(a:text, '#*^$.?/\|{[()]}'), '\n', '\\n', 'g')
endfunction
